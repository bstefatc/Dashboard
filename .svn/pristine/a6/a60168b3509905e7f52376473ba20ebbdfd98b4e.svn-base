package com.inc.sombra.controller;

import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.inc.sombra.entity.Comment;
import com.inc.sombra.entity.Picture;
import com.inc.sombra.entity.Subtask;
import com.inc.sombra.entity.Task;
import com.inc.sombra.manager.ICommentManager;
import com.inc.sombra.manager.IPictureManager;
import com.inc.sombra.manager.ISubtaskManager;
import com.inc.sombra.manager.ITaskManager;

/**
 * Handles requests for the application home page.
 */
@Controller
public class HomeController {
	
	private static final Logger logger = LoggerFactory.getLogger(HomeController.class);
	@Autowired
	IPictureManager pictureManager;
	@Autowired
	ICommentManager commentManager;
	@Autowired
	ITaskManager taskManager;
	@Autowired
	ISubtaskManager subtaskManager;
	/**
	 * Simply selects the home view to render by returning its name.
	 */
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Locale locale, Model model) {
		logger.info("Welcome home! The client locale is {}.", locale);
		System.out.println(pictureManager.getAll());
		
		model.addAttribute("pictureList", pictureManager.getAll());
		
		return "home";
	}
	
	@RequestMapping(value = "/items/{itemId}", method = RequestMethod.GET)
	public String item( Model model,@PathVariable Integer itemId) {
		logger.info("Welcome home! The client locale is {}.");
		model.addAttribute("commentForm",  new Comment());
		model.addAttribute("addToDoForm", new Task());
		model.addAttribute("addsubtask", new Subtask());
		model.addAttribute("oneItem", pictureManager.findPictureById(itemId));
		model.addAttribute("comment", commentManager.findByPictureId(itemId));
		model.addAttribute("tasks", taskManager.findTaskById(itemId));
		model.addAttribute("pictureList", pictureManager.getAll());
		 return "item";
	}
	
	@RequestMapping(value = "/items/addcomment/{itemId}", method = RequestMethod.POST)
	public String addComment(Model model,@ModelAttribute("commentForm") Comment comment,
			@PathVariable Integer itemId){
		Picture picture = new Picture();
		picture.setId(itemId);
		model.addAttribute("oneItem", pictureManager.findPictureById(itemId));
		model.addAttribute("comment", commentManager.findByPictureId(itemId));
		if((comment.getUserName()!="") && (comment.getCommentText()!="")&& (comment.getCommentText()!=null)&& (comment.getCommentText()!=null)){
			comment.setPicture(picture);
		commentManager.save(comment);
		}
		return "redirect:/items/"+itemId;
		}	
	
	@RequestMapping(value = "/items/addtodo/{itemId}", method = RequestMethod.POST)
	public String addTask(Model model,	@ModelAttribute("addToDoForm") Task task,
			@PathVariable Integer itemId){
		Picture picture = new Picture();
		picture.setId(itemId);
		model.addAttribute("oneItem", pictureManager.findPictureById(itemId));
		model.addAttribute("comment", commentManager.findByPictureId(itemId));
		if((task.getName()!="")&&(task.getName()!=null)){
			task.setPicture(picture);
			taskManager.save(task);
		}
		return "redirect:/items/"+itemId;
	}
	
	@RequestMapping(value = "/items/addsubtask/{taskId}/{itemId}", method = RequestMethod.POST)
	public String addSubtask(Model model,	@ModelAttribute("addsubtask") Subtask subtask,
			@PathVariable Integer taskId,@PathVariable Integer itemId){
		Task task = new Task();
		task.setId(taskId);
		model.addAttribute("oneItem", pictureManager.findPictureById(itemId));
		model.addAttribute("comment", commentManager.findByPictureId(itemId));
		if((subtask.getName()!="")&&(subtask.getName()!=null)){
			subtask.setTask(task);
			subtaskManager.save(subtask);
		}
		return  "redirect:/items/" +itemId;
		
	}
}
